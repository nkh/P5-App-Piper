
piper - a command line utility to colorize a stream of text

	introduction

		I needed to color some of the fields of requirement documents.

		using other people's work
			to not re-invent the wheel I tried colout (https://github.com/nojhan/colout)
			I did not continue using it for the reasons below but it is open source; many thanks to the author.
		
		syntax
			I don't like the way colout defined fields and the colors are given.

			I also like P5 regexp

			Other tools forces one to create files which define fields and color; I prefer working
			on the command line, it allows tweaking the command faster. As much as possible of what 
			is possible in a file is also possible on the command line. 
		
		speed test 
			load 601 perl files, verified data, mangle data, colorize, show in fzf
			
			simple perl colorizer: 310 ms
			colout:                926 ms
			
			the 600 ms difference have me looking at the counter increment, without I only see a flicker

	goals
		color the input stream
	
		make simple transformation without to having to call another utility
			eg: expand tab to space, uppercase words

		quickly and efficiently create coloring on the command line
			if it takes little time to do it, it will be done (maybe ...)

	rational 
		color makes data easier to read.
	
	matching order
		first regexp matches, not the longest matching regexp
			echo '1234567890' | piper ^123 {ABCDEF} ^12345 XXXXX
				{ABCDEF}4567890

	command context
	
		simple coloring on the command line

		advanced coloring on the command line with the help of
			configuration files
				reuse coloring components easily on the command line
				save current coloring pipeline too be reused

			scoped matches
				combine coloring components to create new components

		complex coloring with the module's functions 
			evaluate code
				perl
				any executable

			API
				add_color_alias
				add_match_action
				match
				parse_command_line
				...

	Command line interface

		parses command line argument
			comments
			options
			commands

		command format
			minimize typing
			has non verbose mode for for power users

		color names
			internal list of colors can be used directly on the command line
						
		command completion
			colors
			predefined group/aliases
			piper file names

			completion is in color (like 'e' application)

		contextual help 
			-?

		parsing
			Bash special characters are reserved to allow quoting
										
		options
			--load-piper-file | -f file_name
			--load-perl-file | -p file_name
			--load-verbose 
			--include-path

			--no_rc

			--save-pipeline name
			--load-pipeline name
			--save-pipeline-as-function name # creates a function that can be called, IE piper_color_du

			--remove-color
			--keep-color

			-regex-space-relevant # default space is not relevant

			--debug-parse # display how command is parsed (compile time). show which parts are regexp, string, aliases 
			--debug-output # display debug information a match is used (run time)
			--debug #start debugger
			--debug-breakpoint 'name conditions'

			-D var=value # define an environment variable

			--bash-generate-completion
				options
				modes colors
				predefined matches found in .rc

		definition files
			contain
				definitions

				match-replacement commands
					executed after all definition files are parsed	

			multiple definitions of symbols
				reported on stderr
				option to remove the warnings

				priority 
					sub, color, regexp

			two types of files
				-f piper files that can import perl files
					# piper file 
					name:option,option match replacement
					name:option,option match replacement
					name:option,option match replacement

					-f file-name 
					-p file-name 
					--other-option

				-p perl files that know about piper
					multiline definition possible via API

					# perl file
					piper_parse <<'EOD' ;

					name:option,option match replacement
					name:option,option match replacement
					name:option,option match replacement
					name:option,option match replacement

					EOD
					
					piper_set_option(...) ;

					piper_register
						(
						"option, option, ..."
						qr/?x:
							multi
							line
							regexp # with explanations
							/,
						&replacement:sub, # or string
						) ;

					piper_import "file-name" ;
					do $file ;
					use module ;

					sub function_name {} # available as match or color on the command line

			configuration file
				loaded automatically
					--no_rc option

				~/.config/piper.rc

	API
		has a library of helper functions
			de-colorize
			compute un-colorized length
			expand tabs
			LS_COLORS
			ANSI colors

		has temporary variables/functions available for matches to save information
			push_line / pop_line
				to do multi-line coloring

			set_variable / get_variable
				to save state between matches

	parallel processing

		gnu parallel
			works fine for large amount of input and little configuration
			
			worth it from around 200_000 lines

			wrapper around parallel is much easier than implementing parallelization
			and synchronization

			works when there are no multi line matches

		rust parallel
			has --pipe and --quote in latest versions

			slow, bug reported

			works when there are no multi line matches

		built in parallelization
			only a few processes to start as they can be reused

			fork can be done after configuration and match have been compiled
				one time configuration for all processors

			synchronization can be a simplistic round robin 
				feed the processors 1 to 4 (if 4 processors)
				wait for p1 
				print result
				feed p1
				next processor

			works when there are multi line matches

	vertical and horizontal "chunks"
		
		vertical chunk
			skip lines
				'^.*$' ',,'  # nothing more to match
				'^.*$' skip  # nothing more to match

			multi line
				# collect lines
				eval: start-regexp push-line
				eval: not_end_regexp push_line  alternatively eval: has_buffer push_line
				eval:munge  end-regexp pop-lines

				# colorize collected lines
				match color 

		horizontal chunk
			process_range:  match color
			scoped: 'match range' process_range

	debugging  
		better error message when tuple is malformed
			display regexp, replacement, color definitions, definition location, processing unit, scheduling data

		display matches
			with and without color
			what regexp matched, as it looked on the command line
		
		run in real debugger
			piper function named so that they are self explaining in debugger

		=> if all definitions are perl code, or something interpreted by perl
			we can run them and get error reporting from perl

		see also
			grc, h, ...

	testing
		access to parsed data
		access to internal data after replacement
		all documentation examples are continuously tested
			use Pod::Tested

command format

	comment
		# comment
		# 'comment with multiple words'

	match-replacement commands have no names
		anything with a name is a definition to be used later
		
	user defined name 
		[:alpha:][:alnum:]+?

		used to define aliases, colors, match, ... to be reused
		
		the same name can be used multiple times when defining a match
			matching will be done using the list of matches
				a match is done when one match matches 

	match
		perl regexp, alias, or perl match sub
		
		how do we differentiate?
			single word that is an alias or a sub
				eg: word color 
				
				--debug-parse displayes how a command is parsed 

			option 'match-no-lookup' forces the match to be a regexp
				match-no-lookup: word color

				will match string 'word' even if a 'word' match was defined
		
			option 'perl-no-lookup' forces the match to be a sub

		options can be passed to perl regexp 
			default options can be defined in .rc file
				perl_regexp_options='?x:'
				
			default option is ?x: 
				can be changed on the command line
				can be changed in .rc file
				can be, locally, changed in piper files
				can be changed per match-replacement

			as part of the regexp 
				nop:  '?msi:(abc)' color

		regexp mode
			non consuming aka munge
				matches
				action is run (which means input can be changed)
				next match re-start at the same point

				same line can be processed multiple times
					remove colors
					shorten line
					expand tabs
			
				munge:global 'abc' 'cba'
				munge:eval   '^(.*)$' 'perl_code($1)'

			multi color per regexp
				interpolate: '(r1)(r2)(r3)' 'red,$1,,yellow,$2,,blue,$3,red'

			scoped
				^d red   ^t blue   ^x yellow 
				^d red : ^t blue : ^x yellow  # ':' is optional 

				using scoped matches
					mode: d red 
					mode: t blue
					mode: - yellow

					scoped: ^. mode

			match time
				g global
				0
				1
				range
					1-3, minimum one time, max 3 times

				count is attached to mathc-color
					1 being default
					0 is equivalent to skip:

				example with scoped matches:
					rw:        ^[-rw]{2}  color 
					execute:   -          color
					execute:   x          red 

					scoped:3   .{3}       rw,execute

	replacement
		no option:
			color|string
				if a single string is provided
					color if it is color
					string


			[color][,[replacement][,[end-color]]]

			red,text
			xred,text,green
			red,text,xgreen
			xred,text,xgreen
			red,text,green
			red,text,green
			,text
			,text,
			,text
			text,
			,
			,,
			,,,
			,red,
			,,red
			,red
			red,,green
			red,,reset
			red
			red,,
			,,green


		interpolate
			color,interpolated-replacement-string,end-color

			interpolate: match red,the_$1_match,yellow
			i: '(...)' 'red,the_$1_match,yellow'
			i: '(...)(...)' 'red,the_$1_and_$2_match,yellow'

			when single argument is provided
				no colors given
				interpolate

		eval
			perl code, result is the replacement
			bash code, use backticks
		
			whole line can passed to function
				e: '(^.*$)' 'function $1'
				
			piper commands
				one word command

				user can define piper commands
					commands are perl subs. Piper checks the symbol table for subs
					named as the command and does the boilerplate work

					calling other executables is done via system in the perl sub
					
				example
					# define a translator
					uk:eval-match,munge  '/\w+/ && not_uk' to_uk
					
					# later on the command line
					piper uk : word red

				pre-defined commands
					delete line contents
					upper-lowercase
					save current color
					multiline match
						save match to buffer
							match can be whole lines, including \n

			how do we color?
				replacement returns a  list of 3-tuples ([color, replacement, color], ...)

				e: match 'red, perl($1), yellow'

				e: match 'perl("red", $1, "yellow")'

				e: match 'red, `bash $1`, yellow'

				what if the code contains ',' separator?
					first and last comma are always for piper command
					add commas till the right result is reached

			how does code return a scoped match?
				returns what a would have been written in by the user, it is
				the 'scoped' option that makes the match a scoped one.

				e:s match 'perl_code()'

	options	
		^d red ^t blue ^x yellow
		
		need to discriminate name and options
			option list separator is ':' or ','
				
			option list must contain at least one ':' separator

			most options have short names

			name is an option if 
				does not match predefined options
				matches [:alpha:][:alnum:]+

			options can be mixed
				some options do not mix
					error generated and explanation provided
					
				recommendation is to have the name, or skip, first

			# when a regexp looks like an option
				name: color # name: is a regexp that looks like an option

				any_option: name: color
				nop: name: red

		options list
			provide table of incompatible options
			provide table of short and long names (from code)
			
			nop: | ':' : # does nothing, used when the match looks like a name or option
			nop: abc red

			w: # spaces are part of the regexp, opposite of /x 
			w: regexp_with_spaces color

			name: # names the match-replacement-options
			name: name is anything that is not an option name
			name:              abc red
			name:option,option abc red
			name:option:option abc red

			skip: # removes the match-replacement-options, comment it away
			skip:name: abc red
			skip:name:option,option abc red

			alias: # makes a name equivalent to another name
			alias: name_to_alias alias

			remove: # removes a name 
			remove: name why

			match-no-lookup: # do not lookup the match, given match is a regexp to use
			match-no-lookup: name red 

			# define regexp
			regexp: name regexp
			regexp: whole-line '^.*$' 

			#define colors 
			color:  my_color red 
			cyclic: Xmas red,green,yellow
			stack:  Xmas red,green,yellow
			group:  Xmas red,green,yellow

			interpolate: #	color, sting_to_interpolate, color (multiple time)
			interpolate3: '(abc)' 'my_color,"$1$1",reset' 

			eval: # the replacement consists of one part
			eval: abc 'perl_code()'

			eval3: # the replacement and returned values consists of three parts (multiple time)
				# colors passed by user have higher priority than those returned by code
			eval3: match 'color, code, color [, color, code, color]' 
				 
			# bash and other executables
			eval: abc "`executable options`" 

			eval_match:
			eval-match: '$. % 2' blue 
				passed 
					current line
					remainder of line
					other information

				returns a code and possible extra elements
					fail

					succeed, regexp to apply
						amount of input consumed
					
					succeed, string to add to the output
						continue processing or not
						amount of input consumed


			eval-input: '^.*$' lc 

			0-n: # how many times the  match-color is considered, default is 1
			1-3: abc stack_color
			
			g | global: # match-color is always considered
			g: abc red

			scoped
			scoped: abc 'a, b, c' 

				scoped via eval
					eval: abc 'piper("name) && piper("name2")'

			debug-parse: abc red  
				display how command is parsed (compile time). 
				
			debug-output: abc red  
				display debug information when match is used (run time)
					directly
					as a scoped match

			debug: abc red
				start debugger when used

			debug-breakpoint: name conditions
				stop, in the debugger when match is used and condition is true

colors
	make current_color available so matches can use it
		eg: 'regexp' 'inverse current_color'
		eg: 'regexp' 'bold  current_color'

		current color can come from old ansi code or from color in the replacement
		
		or we can make reset the last color detected
			match color
			
	background and foreground color extracted separately
		allows changin only one of them selectively

		match 'blue,, yellow restore_on_background'

	defining the default color, background and foreground
		^ 'red,,on_yellow'
	
	color stack
		regexp can pop color from stack
		"obvious" color when stack is empty

		there is a default stack, empty
			stack: default red,green,blue

		-f C_definition # 'load default color stack' yyy pop_default zzz pop_default

		named color stacks are poped like this
			stack: my red,green,blue
			yyy pop_my : zzz pop_my
			
	color cycles
		like a stack but reset to the top after hitting bottom

		there is a default cycle, empty
			cycle default red,green,blue

		-f C_definition # 'load default color cycle' yyy popc_default  zzz popc_default

	color subs
		anywhere a color is expected, a perl sub name (returning a color code) can be given

		can be used to define stacks and cycles 

		used for complex parsing were matchers keep data in perl space and color depends
			on that state

	color group definition	
		group my_color color,color,color
			gets "compiled" immediately

		yyy my_color_0 zzz my_color_1

	color aliases
		#use color names rather than RGB
		alias: rgb411 warning_color
		alias: warning_color warning_color_2 

	color from LS_COLOR
		set of colors named 
			default types (normal, file, directory, ...)
			directories: regexp_for_directory LS_COLORS_DIRECTORY

		coloring extentions
			eval: regexp_for_file 'LSC($1)'

		function LSC available in library

	16M, 256, and 16 colors mode
		color can have definition in each mode, this is easiest to do with some
		perl code that is loaded by piper as piper file do not have any control flow
	
	colors lines differently
		a regexp has a color at a specif line, another at another line
			can be done with two regexps, simpler clearer, but more verbose

		example of how to color one line in a color and the other in another color:
			eval_match: '$. % 2 && (1, "^.*$")'  on_blue
			eval_match: '!($. % 2) && (1, "^.*$")'  on_red

			? how do we match a regexp and a line and something external
				eval_match: '!($. % 2) && /regexp/ && `command` && (1, "^.*$")'  on_red
				eval_match: function_does_it_all on_red
				eval_match: '`bash`' on_red

	data already containg colors
		problem occurs only when match regexp can match an ansi code
			having to say regexp '12' that is not part of an ansi code is strenuous at best

		Do we match accross color boundaries?
			yes, we match string not colors so old ansi codes must be removed

		default color handling
			none
				most input we have is without ansi code
				faster to not make a pass to remove color codes	if not needed
				user knows best when to remove or keep the colors
			
		remove all color information  via option to piper
			--remove-color
			
		keep colors colors via option to piper
			--keep-color

			colors are removed from input but the color and its position is stored
				colors are reinserted after matching

			must work with multi line strings (pushed lines, pop) which may be
			distributed to multiple scoped matches

examples
	ls -l
		in a directory with many files, big chunk of white text on the left side makes it
		less readable

		but even when used in a directory with a few entries, the output, I believe, could
		be made more readable and more informative. This varies from person to person so it
		needs to be tweaked for each person's needs

		total 20K
		drwxrwxr-x 2 nadim nadim 4.0K Nov  7 11:48 t
		-rwxrwxr-x 1 nadim nadim 4.4K Oct 12 13:41 piper
		-rw-rw-r-- 1 nadim nadim  12K Nov  7 11:42 piper.txt
		
		ls will use LS_COLORS so the file names will be colorized, I want to keep that. Many
		other utilities that display file names could use LS_COLORS but unfortunately don't.

		the header and each line displays a size; I want the size to be displayed in a 
		different color depending on the size, big files should be made more obvious

		the type of the file, particularly if it is a link

		I want the executable bit display to be contrasted with the rw bits, if set and not a 
		directory. if it is a directory and not set, then I want to see it highlited too.

		the ownership should be displayed in a discreet color if it is mine, blue if it is root
		owned, yellow if someone else owns it

		the date in a discreet color, maybe very old files should be hilighted

		Piper coloring
			# type
			^l color
			^d LS_COLORS_DIRECTORY # pre defined
			^- color
			
			# permissions 
			rw: '^[-rw]{2}' color 
			
			execute: - color
			execute: x red

			rwx:scoped,3 '.{3}' rw,execute
			
			# owner
			eval-match '$ENV{USER}.'\s+[[:alnum:]]+' discreet_color 
			
			# size free-form
			'[0-9.]+          G'      on_red
			'[0-9.]+          M'      red
			'[5-9]   [0-9]{2} K \s'   yellow
			'[0-9.]+          K \s'   discreet
			
			# date	
			'.+?((\d\d:\d\d)|([0-9]{4}))' discreet_color


